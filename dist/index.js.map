{"version":3,"file":"index.js","sources":["../src/game/constants/colors.ts","../src/game/constants/shapes.ts","../src/game/core/Shape.ts","../src/game/core/Board.ts","../src/game/core/KeyHandler.ts","../src/game/core/GameHandler.ts","../src/game/index.ts","../src/ai/index.ts","../src/ai/core/AI.ts"],"sourcesContent":["const colors = [\r\n  \"#00f0f0\",\r\n  \"#0000f5\",\r\n  \"#f0a000\",\r\n  \"#f0f000\",\r\n  \"#00f000\",\r\n  \"#a000f0\",\r\n  \"#f00000\",\r\n] as const;\r\n\r\nexport default colors;\r\n","type ShapeMatrix = number[][];\r\n\r\nconst shapes: ShapeMatrix[] = [\r\n  [[1, 1, 1, 1]],\r\n  [\r\n    [2, 0, 0],\r\n    [2, 2, 2],\r\n  ],\r\n  [\r\n    [0, 0, 3],\r\n    [3, 3, 3],\r\n  ],\r\n  [\r\n    [4, 4],\r\n    [4, 4],\r\n  ],\r\n  [\r\n    [0, 5, 5],\r\n    [5, 5, 0],\r\n  ],\r\n  [\r\n    [0, 6, 0],\r\n    [6, 6, 6],\r\n  ],\r\n  [\r\n    [7, 7, 0],\r\n    [0, 7, 7],\r\n  ],\r\n];\r\n\r\nexport default shapes;\r\n","import shapes from \"../constants/shapes\";\r\nimport Board from \"./Board\";\r\n\r\nclass Shape {\r\n  /**\r\n   * we want to be able to do a last action when the shape can't go down anymore\r\n   * 0 we can do anything\r\n   * 1 we can do anything except going down\r\n   * > 1 we can't do anything\r\n   */\r\n  private downTick = 0;\r\n\r\n  constructor(\r\n    private board: Board,\r\n    private shape: number[][],\r\n    private position: { x: number; y: number } = null\r\n  ) {\r\n    if (!this.position) {\r\n      this.position = {\r\n        x: Math.floor(this.board.getWidth() / 2 - this.shape[0].length / 2),\r\n        y: -this.shape.length,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate a random shape\r\n   * @param board\r\n   * @returns\r\n   */\r\n  static randomShape(board: Board) {\r\n    const rndShape = shapes[Math.floor(Math.random() * shapes.length)];\r\n    return new Shape(board, rndShape);\r\n  }\r\n\r\n  /**\r\n   * Rotate the shape in clockwise with 90 degrees\r\n   * @returns\r\n   */\r\n  rotate() {\r\n    let haveRotate = false;\r\n\r\n    const matrix = this.shape;\r\n\r\n    const numRows = matrix.length;\r\n    const numCols = matrix[0].length;\r\n    const rotated: number[][] = [];\r\n\r\n    for (let col = 0; col < numCols; col++) {\r\n      const newRow: number[] = [];\r\n      for (let row = numRows - 1; row >= 0; row--) {\r\n        newRow.push(matrix[row][col]);\r\n      }\r\n      rotated.push(newRow);\r\n    }\r\n\r\n    const newY =\r\n      this.position.y +\r\n      Math.floor(this.shape.length / 2) -\r\n      Math.floor(rotated.length / 2);\r\n    const newX =\r\n      this.position.x +\r\n      Math.floor(this.shape[0].length / 2) -\r\n      Math.floor(rotated[0].length / 2);\r\n\r\n    const canRotateX =\r\n      newX + rotated[0].length <= this.board.getWidth() && newX >= 0;\r\n    const canRotateY = newY + rotated.length <= this.board.getHeight();\r\n\r\n    if (canRotateX && canRotateY) {\r\n      //TODO (Optimisation): Make the rotation better without that much loop\r\n      //Run well so not that much a big priority\r\n      const board = structuredClone(this.board.getBoard());\r\n\r\n      //We simulate the removing of the original shape\r\n      for (let i = 0; i < this.shape.length; ++i) {\r\n        for (let j = 0; j < this.shape[i].length; ++j) {\r\n          if (this.position.y + i >= 0)\r\n            board[i + this.position.y][j + this.position.x] = 0;\r\n        }\r\n      }\r\n\r\n      //checking we dont make conflict with other shapes\r\n      for (let i = 0; i < rotated.length; ++i) {\r\n        for (let j = 0; j < rotated[i].length; ++j) {\r\n          if (newY + i >= 0 && board[i + newY][j + newX] !== 0)\r\n            return haveRotate;\r\n        }\r\n      }\r\n\r\n      haveRotate = true;\r\n\r\n      this.position.y = newY;\r\n      this.position.x = newX;\r\n      this.shape = rotated;\r\n    }\r\n\r\n    this.board.update(false);\r\n    return haveRotate;\r\n  }\r\n\r\n  /**\r\n   * Check if the shape can go on the left\r\n   * @returns\r\n   */\r\n  canGoLeft() {\r\n    const shape = this.shape;\r\n    const position = this.position;\r\n    const board = this.board.getBoard();\r\n\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        const isIntersectingLeft =\r\n          // position.y + i >= 0 &&\r\n          (shape[i][j - 1] === 0 || shape[i][j - 1] === undefined) &&\r\n          board[i + position.y]?.[j + position.x - 1] !== 0 &&\r\n          position.x !== 0;\r\n\r\n        if (isIntersectingLeft && shape[i][j] !== 0) return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check if the shape can go on the right\r\n   * @returns\r\n   */\r\n  canGoRiht() {\r\n    const shape = this.shape;\r\n    const position = this.position;\r\n    const board = this.board.getBoard();\r\n\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        const isIntersectingRight =\r\n          position.y + i >= 0 &&\r\n          (shape[i][j + 1] === 0 || shape[i][j + 1] === undefined) &&\r\n          board[i + position.y]?.[j + position.x + 1] !== 0 &&\r\n          position.x !== this.board.getWidth() - shape[0].length;\r\n\r\n        if (isIntersectingRight && shape[i][j] !== 0) return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check if the shape can go down\r\n   * @returns\r\n   */\r\n  canGoDown() {\r\n    if (this.haveReachedBottom()) {\r\n      ++this.downTick;\r\n      return this.downTick <= 1;\r\n    }\r\n\r\n    const shape = this.shape;\r\n    const position = this.position;\r\n    const board = this.board.getBoard();\r\n\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        const isIntersectingDown =\r\n          position.y + i + 1 >= 0 &&\r\n          (shape[i + 1]?.[j] === 0 || shape[i + 1]?.[j] === undefined) &&\r\n          board[i + position.y + 1]?.[j + position.x] !== 0;\r\n\r\n        if (isIntersectingDown && shape[i][j] !== 0) {\r\n          ++this.downTick;\r\n          return this.downTick <= 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.downTick = 0;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Make the shape go down\r\n   */\r\n  goDown() {\r\n    if (\r\n      this.position.y !== this.board.getHeight() - this.shape.length &&\r\n      this.downTick === 0\r\n    )\r\n      ++this.position.y;\r\n    this.board.update(false);\r\n  }\r\n\r\n  /**\r\n   * Make the shape go on the right\r\n   * @returns\r\n   */\r\n  goRight() {\r\n    if (!this.canGoRiht()) return;\r\n\r\n    if (this.position.x !== this.board.getWidth() - this.shape[0].length)\r\n      ++this.position.x;\r\n    this.board.update(false);\r\n  }\r\n\r\n  /**\r\n   * Make the shape go on the left\r\n   * @returns\r\n   */\r\n  goLeft() {\r\n    if (!this.canGoLeft()) return;\r\n\r\n    if (this.position.x !== 0) this.position.x--;\r\n    this.board.update(false);\r\n  }\r\n\r\n  /**\r\n   * Check if we have reached bottom of the board and cant go down anymore\r\n   * @returns\r\n   */\r\n  haveReachedBottom() {\r\n    return this.position.y === this.board.getHeight() - this.shape.length;\r\n  }\r\n\r\n  getShape() {\r\n    return this.shape;\r\n  }\r\n\r\n  getPosition() {\r\n    return this.position;\r\n  }\r\n\r\n  /**\r\n   * Create a copy of the shape\r\n   * @returns\r\n   */\r\n  copy() {\r\n    return new Shape(this.board, this.shape, structuredClone(this.position));\r\n  }\r\n}\r\n\r\nexport default Shape;\r\n","import Shape from \"./Shape\";\r\n\r\nclass Board {\r\n  private board: number[][] = [];\r\n\r\n  private score = 0;\r\n\r\n  private actualShape = Shape.randomShape(this);\r\n  private nextShape = Shape.randomShape(this);\r\n  private backShape: Shape;\r\n\r\n  constructor(private width = 12, private height = 24) {\r\n    this.buildBoard();\r\n  }\r\n\r\n  /**\r\n   * Build the board\r\n   */\r\n  private buildBoard() {\r\n    for (let i = 0; i < this.width * this.height; ++i) {\r\n      if (i % this.width === 0) this.board.push([]);\r\n      this.board[this.board.length - 1].push(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the last position of the actual shape from the board\r\n   * @returns\r\n   */\r\n  removeLastShapeDraw() {\r\n    if (!this.backShape) return;\r\n\r\n    const shape = this.backShape.getShape();\r\n    const position = this.backShape.getPosition();\r\n\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        if (position.y + i < 0) continue;\r\n        if (shape[i][j] !== 0) this.board[i + position.y][j + position.x] = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the actual shape to the board\r\n   */\r\n  displayShape() {\r\n    const shape = this.actualShape.getShape();\r\n    const position = this.actualShape.getPosition();\r\n\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        if (position.y + i < 0) continue;\r\n        if (shape[i][j] !== 0)\r\n          this.board[i + position.y][j + position.x] = shape[i][j];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the game is loose\r\n   * @returns\r\n   */\r\n  haveLoose() {\r\n    const topLine = this.board[0];\r\n    return topLine.some((col) => col !== 0) && !this.actualShape.canGoDown();\r\n  }\r\n\r\n  /**\r\n   * Get the score from the completed lines as the same moment\r\n   * @param completedLines\r\n   * @returns\r\n   */\r\n  getScoreFromCompletedLine(completedLines: number) {\r\n    switch (completedLines) {\r\n      case 0:\r\n        return 0;\r\n      case 1:\r\n        return 40;\r\n      case 2:\r\n        return 100;\r\n      case 3:\r\n        return 300;\r\n      default:\r\n        return 1200;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove completed lines and set the score based on it\r\n   */\r\n  removeCompletedLines() {\r\n    let completedLines = 0;\r\n\r\n    for (let i = 0; i < this.board.length; ++i) {\r\n      const line = this.board[i];\r\n\r\n      const lineCompleted = line.every((col) => col !== 0);\r\n\r\n      if (!lineCompleted) continue;\r\n\r\n      ++completedLines;\r\n      this.board.splice(i, 1);\r\n      this.board.unshift(Array(this.width).fill(0));\r\n    }\r\n\r\n    this.score += this.getScoreFromCompletedLine(completedLines);\r\n  }\r\n\r\n  /**\r\n   * Update the board (make shape go down, ...)\r\n   * @param goDown\r\n   */\r\n  update(goDown = true) {\r\n    this.removeLastShapeDraw();\r\n\r\n    if (!this.actualShape.canGoDown()) {\r\n      this.score += this.actualShape.getShape().length + 1; //We had the numbers of rows + 1 to the score\r\n      this.displayShape();\r\n      this.removeCompletedLines();\r\n      this.actualShape = this.nextShape;\r\n      this.nextShape = Shape.randomShape(this);\r\n    }\r\n\r\n    this.backShape = this.actualShape.copy();\r\n\r\n    if (goDown) this.actualShape.goDown();\r\n\r\n    this.displayShape();\r\n  }\r\n\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  getBoard() {\r\n    return this.board;\r\n  }\r\n\r\n  getWidth() {\r\n    return this.width;\r\n  }\r\n\r\n  getHeight() {\r\n    return this.height;\r\n  }\r\n\r\n  getActualShape() {\r\n    return this.actualShape;\r\n  }\r\n\r\n  getNextShape() {\r\n    return this.nextShape;\r\n  }\r\n\r\n  getBackShape() {\r\n    return this.backShape;\r\n  }\r\n\r\n  setActualShape(shape: Shape) {\r\n    this.actualShape = shape;\r\n  }\r\n\r\n  setNextShape(shape: Shape) {\r\n    this.nextShape = shape;\r\n  }\r\n\r\n  setBackShape(shape: Shape) {\r\n    this.backShape = shape;\r\n  }\r\n\r\n  setBoard(board: number[][]) {\r\n    this.board = board;\r\n  }\r\n\r\n  setScore(score: number) {\r\n    this.score = score;\r\n  }\r\n\r\n  /**\r\n   * Reset the board\r\n   */\r\n  reset() {\r\n    this.board = [];\r\n\r\n    this.actualShape = Shape.randomShape(this);\r\n    this.nextShape = Shape.randomShape(this);\r\n    this.backShape = null;\r\n\r\n    this.score = 0;\r\n\r\n    this.buildBoard();\r\n  }\r\n\r\n  /**\r\n   * Create a deep copy of the board\r\n   * @returns\r\n   */\r\n  copy() {\r\n    const copy = new Board(this.width, this.height);\r\n    copy.setActualShape(this.actualShape.copy());\r\n    copy.setNextShape(this.nextShape.copy());\r\n    copy.setBackShape(this.backShape.copy());\r\n    copy.setBoard(structuredClone(this.board));\r\n    copy.setScore(this.score);\r\n    return copy;\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import GameHandler from \"./GameHandler\";\r\n\r\ntype Keys = {\r\n  RIGHT: string;\r\n  DOWN: string;\r\n  LEFT: string;\r\n  ROTATE: string;\r\n};\r\n\r\nclass KeyHandler {\r\n  constructor(private gameHandler: GameHandler, private keys: Keys) {\r\n    this.initKeyListener();\r\n  }\r\n\r\n  /**\r\n   * Append key listener to the dom\r\n   */\r\n  initKeyListener() {\r\n    const board = this.gameHandler.getBoard();\r\n\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      if (!this.gameHandler.isRunning()) return;\r\n\r\n      const key = event.key;\r\n      const cmd = Object.entries(this.keys).find(\r\n        (arr) => arr[1].toLocaleLowerCase() === key.toLocaleLowerCase()\r\n      );\r\n\r\n      if (cmd) {\r\n        const shape = board.getActualShape();\r\n\r\n        switch (cmd[0]) {\r\n          case \"RIGHT\":\r\n            shape.goRight();\r\n            break;\r\n          case \"LEFT\":\r\n            shape.goLeft();\r\n            break;\r\n          case \"DOWN\":\r\n            shape.goDown();\r\n            break;\r\n          case \"ROTATE\":\r\n            shape.rotate();\r\n            break;\r\n        }\r\n\r\n        this.gameHandler.drawGame();\r\n        if (board.haveLoose()) this.gameHandler.loose();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default KeyHandler;\r\n","import colors from \"../constants/colors\";\r\nimport Board from \"./Board\";\r\nimport KeyHandler from \"./KeyHandler\";\r\n\r\nenum GameStatus {\r\n  LOOSE = \"You loose\",\r\n  NOT_PLAYING = \"Not playing\",\r\n  PLAYING = \"Playing\",\r\n}\r\n\r\nconst GAME_OPTIONS = {\r\n  TICK: 400,\r\n  KEYS: {\r\n    RIGHT: \"ArrowRight\",\r\n    DOWN: \"ArrowDown\",\r\n    LEFT: \"ArrowLeft\",\r\n    ROTATE: \"ArrowUp\",\r\n  },\r\n};\r\n\r\nclass GameHandler {\r\n  private clock: NodeJS.Timer;\r\n\r\n  private ctx: CanvasRenderingContext2D;\r\n  private canvasWidth: number;\r\n  private canvasHeight: number;\r\n\r\n  private board = new Board();\r\n  private keyHandler: KeyHandler;\r\n\r\n  private gameStatus: GameStatus = GameStatus.NOT_PLAYING;\r\n\r\n  constructor(private canvas: HTMLCanvasElement) {\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.canvasWidth = canvas.width;\r\n    this.canvasHeight = canvas.height;\r\n\r\n    this.keyHandler = new KeyHandler(this, GAME_OPTIONS.KEYS);\r\n\r\n    this.drawGame();\r\n  }\r\n\r\n  /**\r\n   * Draw polygon on the block\r\n   * @param coordinates\r\n   * @param color\r\n   */\r\n  drawPolygon(coordinates: { x: number; y: number }[], color: string) {\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(coordinates[0].x, coordinates[0].y);\r\n    for (let i = 1; i < coordinates.length; ++i) {\r\n      this.ctx.lineTo(coordinates[i].x, coordinates[i].y);\r\n    }\r\n    this.ctx.closePath();\r\n    this.ctx.fill();\r\n  }\r\n\r\n  /**\r\n   * Draw border for the grid\r\n   * @param x\r\n   * @param y\r\n   */\r\n  drawBorder(x: number, y: number) {\r\n    const blockSizeWidth = this.canvasWidth / 2 / this.board.getWidth();\r\n    const blockSizeHeight = this.canvasHeight / this.board.getHeight();\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = \"#ffffff10\";\r\n    this.ctx.rect(\r\n      x * blockSizeWidth,\r\n      y * blockSizeHeight,\r\n      blockSizeWidth,\r\n      blockSizeHeight\r\n    );\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  /**\r\n   * Draw one block for a tetris shape\r\n   * @param x\r\n   * @param y\r\n   * @param color\r\n   * @param suppX\r\n   * @param suppY\r\n   */\r\n  drawRect(x: number, y: number, color: string, suppX = 0, suppY = 0) {\r\n    const blockSizeWidth = this.canvasWidth / 2 / this.board.getWidth();\r\n    const blockSizeHeight = this.canvasHeight / this.board.getHeight();\r\n\r\n    const fx = x * blockSizeWidth + suppX;\r\n    const fy = y * blockSizeHeight + suppY;\r\n\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.fillRect(fx, fy, blockSizeWidth, blockSizeHeight);\r\n\r\n    /* Fill polygons for best effect */\r\n    const coordinatesSupp = [\r\n      { x: fx, y: fy },\r\n      { x: fx + blockSizeWidth, y: fy },\r\n      {\r\n        x: fx + blockSizeWidth - blockSizeHeight / 4,\r\n        y: fy + blockSizeHeight / 4,\r\n      },\r\n      { x: fx + blockSizeHeight / 4, y: fy + blockSizeHeight / 4 },\r\n    ];\r\n    const coordinatesInf = [\r\n      { x: fx, y: fy + blockSizeHeight },\r\n      { x: fx + blockSizeWidth, y: fy + blockSizeHeight },\r\n      {\r\n        x: fx + blockSizeWidth - blockSizeHeight / 4,\r\n        y: fy + blockSizeHeight - blockSizeHeight / 4,\r\n      },\r\n      {\r\n        x: fx + blockSizeHeight / 4,\r\n        y: fy + blockSizeHeight - blockSizeHeight / 4,\r\n      },\r\n    ];\r\n    const coordinatesLeft = [\r\n      { x: fx, y: fy },\r\n      { x: fx + blockSizeWidth / 4, y: fy + blockSizeWidth / 4 },\r\n      {\r\n        x: fx + blockSizeWidth / 4,\r\n        y: fy + blockSizeHeight - blockSizeWidth / 4,\r\n      },\r\n      { x: fx, y: fy + blockSizeHeight },\r\n    ];\r\n    const coordinatesRight = [\r\n      { x: fx + blockSizeWidth, y: fy },\r\n      {\r\n        x: fx + blockSizeWidth - blockSizeWidth / 4,\r\n        y: fy + blockSizeWidth / 4,\r\n      },\r\n      {\r\n        x: fx + blockSizeWidth - blockSizeWidth / 4,\r\n        y: fy + blockSizeHeight - blockSizeWidth / 4,\r\n      },\r\n      { x: fx + blockSizeWidth, y: fy + blockSizeHeight },\r\n    ];\r\n    this.drawPolygon(coordinatesSupp, \"#ffffff80\");\r\n    this.drawPolygon(coordinatesInf, \"#00000080\");\r\n    this.drawPolygon(coordinatesLeft, \"#00000050\");\r\n    this.drawPolygon(coordinatesRight, \"#00000050\");\r\n  }\r\n\r\n  /**\r\n   * Draw all the game and informations\r\n   */\r\n  drawGame() {\r\n    const darkColor = \"#212129\";\r\n\r\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n\r\n    this.ctx.fillStyle = darkColor;\r\n    this.ctx.fillRect(0, 0, this.canvasWidth / 2, this.canvasHeight);\r\n\r\n    const boardMatrix = this.board.getBoard();\r\n\r\n    /* Drawing main board */\r\n    for (let i = 0; i < boardMatrix.length; ++i) {\r\n      for (let j = 0; j < boardMatrix[i].length; ++j) {\r\n        const isBorderGrid = boardMatrix[i][j] === 0;\r\n\r\n        if (isBorderGrid) {\r\n          this.drawBorder(j, i);\r\n          continue;\r\n        }\r\n        //We set -1 because 0 was reserved for empty\r\n        const color = colors[boardMatrix[i][j] - 1];\r\n        this.drawRect(j, i, color);\r\n      }\r\n    }\r\n\r\n    const textX = this.canvasWidth / 2 + 10;\r\n\r\n    /* Score */\r\n    this.ctx.fillStyle = darkColor;\r\n    this.ctx.font = \"20px Arial, sans-serif\";\r\n    this.ctx.fillText(\"Score: \" + this.board.getScore(), textX, 35);\r\n\r\n    /* Game status */\r\n    this.ctx.fillText(\"Game status:\", textX, 65);\r\n    this.ctx.fillText(\"> \" + this.gameStatus, textX, 85);\r\n\r\n    /* Next Shape */\r\n    this.ctx.fillText(\"Next Shape:\", textX, 115);\r\n    const nextShape = this.board.getNextShape().getShape();\r\n    for (let i = 0; i < nextShape.length; ++i) {\r\n      for (let j = 0; j < nextShape[i].length; ++j) {\r\n        const dontNeedDraw = nextShape[i][j] === 0;\r\n\r\n        if (dontNeedDraw) continue;\r\n\r\n        //We set -1 because 0 was reserved for empty\r\n        const color = colors[nextShape[i][j] - 1];\r\n        this.drawRect(j, i, color, textX, 125);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to call when we loose\r\n   */\r\n  loose() {\r\n    this.gameStatus = GameStatus.LOOSE;\r\n    this.drawGame();\r\n    this.reset(false);\r\n  }\r\n\r\n  /**\r\n   * Start the game/clock\r\n   */\r\n  start() {\r\n    if (!this.clock) {\r\n      this.gameStatus = GameStatus.PLAYING;\r\n      this.clock = setInterval(() => {\r\n        this.board.update();\r\n        this.drawGame();\r\n        if (this.board.haveLoose()) this.loose();\r\n      }, GAME_OPTIONS.TICK);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the game/clock\r\n   */\r\n  stop() {\r\n    clearInterval(this.clock);\r\n    this.gameStatus = GameStatus.NOT_PLAYING;\r\n    this.clock = null;\r\n    // this.drawGame();\r\n  }\r\n\r\n  /**\r\n   * Reset the game\r\n   * @param withDraw\r\n   */\r\n  reset(withDraw = true) {\r\n    this.stop();\r\n    this.board.reset();\r\n    if (withDraw) this.drawGame();\r\n  }\r\n\r\n  /**\r\n   * Check if game is playing\r\n   * @returns\r\n   */\r\n  isRunning() {\r\n    return !!this.clock;\r\n  }\r\n\r\n  getBoard() {\r\n    return this.board;\r\n  }\r\n}\r\n\r\nexport default GameHandler;\r\n","import GameHandler from \"./core/GameHandler\";\r\n\r\nconst canvas = document.querySelector(\"canvas\");\r\nconst playBtn = document.querySelector(\"#play\");\r\nconst pauseBtn = document.querySelector(\"#pause\");\r\nconst resetBtn = document.querySelector(\"#reset\");\r\n\r\nconst game = new GameHandler(canvas);\r\n\r\nplayBtn.addEventListener(\"click\", () => game.start());\r\npauseBtn.addEventListener(\"click\", () => game.stop());\r\nresetBtn.addEventListener(\"click\", () => game.reset());\r\n\r\nexport default game;\r\n","import game from \"../game\";\r\nimport AI from \"./core/AI\";\r\n\r\nconst ai = new AI(game);\r\n\r\nconst fpsRange: HTMLInputElement = document.querySelector(\"#fps\");\r\nconst startBtn = document.querySelector(\"#start-ai\");\r\nconst stopBtn = document.querySelector(\"#stop-ai\");\r\n\r\nfpsRange.addEventListener(\"change\", () => ai.setFps(Number(fpsRange.value)));\r\nstartBtn.addEventListener(\"click\", () => ai.start());\r\nstopBtn.addEventListener(\"click\", () => ai.stop());\r\n\r\nexport default ai;\r\n","import Board from \"../../game/core/Board\";\r\nimport GameHandler from \"../../game/core/GameHandler\";\r\nimport Branch from \"./Branch\";\r\n\r\ntype Action = \"rotate\" | \"right\" | \"left\" | \"down\";\r\n\r\nclass AI {\r\n  private fps = 10;\r\n  private clock: NodeJS.Timeout;\r\n\r\n  constructor(private gameHandler: GameHandler) {}\r\n\r\n  ai(board: Board) {}\r\n\r\n  main() {\r\n    const originalBoard = this.gameHandler.getBoard();\r\n    const shape = originalBoard.getActualShape();\r\n    // const originalShape = originalBoard.getActualShape();\r\n\r\n    console.log(1);\r\n    //We make the shape start on left side first\r\n    while (shape.canGoLeft()) {\r\n      shape.goLeft();\r\n    }\r\n    console.log(2);\r\n\r\n    const boardCopy = originalBoard.copy();\r\n\r\n    let betterScore = -1;\r\n    let betterPath: Action[] = null;\r\n\r\n    //AI\r\n    for (let r = 0; r < 4; ++r) {\r\n      let path: Action[] = [];\r\n\r\n      let shapeCopy = shape.copy();\r\n\r\n      for (let i = 0; i < r; ++i) {\r\n        const rotationValid = shapeCopy.rotate();\r\n        if (rotationValid) path.push(\"rotate\");\r\n      }\r\n\r\n      while (shapeCopy.canGoRiht()) {\r\n        while (shapeCopy.canGoDown()) {\r\n          path.push(\"down\");\r\n          shapeCopy.goDown();\r\n          console.log(\"d\");\r\n        }\r\n\r\n        path.push(\"right\");\r\n        console.log(\"r\");\r\n        // shapeCopy = shape.copy();\r\n        shapeCopy.goRight();\r\n      }\r\n\r\n      console.log(\"f\");\r\n\r\n      boardCopy.setActualShape(shapeCopy);\r\n      boardCopy.displayShape();\r\n      const score = boardCopy.getScore();\r\n      boardCopy.removeLastShapeDraw();\r\n      if (score > betterScore) {\r\n        betterScore = score;\r\n        betterPath = path;\r\n      }\r\n    }\r\n\r\n    console.log(3);\r\n\r\n    //Apply actions to the shape\r\n    for (const action of betterPath) {\r\n      switch (action) {\r\n        case \"rotate\":\r\n          shape.rotate();\r\n          break;\r\n        case \"down\":\r\n          shape.goDown();\r\n          break;\r\n        case \"right\":\r\n          shape.goRight();\r\n          break;\r\n      }\r\n    }\r\n    console.log(4);\r\n\r\n    /* Refreshing and game status handling */\r\n    if (originalBoard.haveLoose()) {\r\n      this.stop();\r\n      this.gameHandler.loose();\r\n    } else {\r\n      this.gameHandler.drawGame();\r\n      // this.clock = setTimeout(() => this.main(), 1000 / this.fps);\r\n      window.requestAnimationFrame(() => this.main());\r\n    }\r\n  }\r\n\r\n  start() {\r\n    //we stop the gameHandler to ensure we can't use key and the game dont refresh each GAME TICK\r\n    this.gameHandler.stop();\r\n    this.main();\r\n  }\r\n\r\n  stop() {\r\n    if (this.clock) clearTimeout(this.clock);\r\n  }\r\n\r\n  setFps(fps: number) {\r\n    this.fps = fps;\r\n  }\r\n}\r\n\r\nexport default AI;\r\n"],"names":["colors","shapes","Shape","constructor","board","shape","position","this","downTick","x","Math","floor","getWidth","length","y","randomShape","rndShape","random","rotate","haveRotate","matrix","numRows","numCols","rotated","col","newRow","row","push","newY","newX","canRotateX","canRotateY","getHeight","structuredClone","getBoard","i","j","update","canGoLeft","undefined","canGoRiht","canGoDown","haveReachedBottom","_a","_b","_c","goDown","goRight","goLeft","getShape","getPosition","copy","Board","width","height","score","actualShape","nextShape","buildBoard","removeLastShapeDraw","backShape","displayShape","haveLoose","some","getScoreFromCompletedLine","completedLines","removeCompletedLines","every","splice","unshift","Array","fill","getScore","getActualShape","getNextShape","getBackShape","setActualShape","setNextShape","setBackShape","setBoard","setScore","reset","KeyHandler","gameHandler","keys","initKeyListener","document","addEventListener","event","isRunning","key","cmd","Object","entries","find","arr","toLocaleLowerCase","drawGame","loose","GameStatus","GAME_OPTIONS","RIGHT","DOWN","LEFT","ROTATE","canvas","querySelector","playBtn","pauseBtn","resetBtn","game","gameStatus","NOT_PLAYING","ctx","getContext","canvasWidth","canvasHeight","keyHandler","drawPolygon","coordinates","color","fillStyle","beginPath","moveTo","lineTo","closePath","drawBorder","blockSizeWidth","blockSizeHeight","strokeStyle","rect","stroke","drawRect","suppX","suppY","fx","fy","fillRect","coordinatesSupp","coordinatesInf","coordinatesLeft","coordinatesRight","darkColor","clearRect","boardMatrix","textX","font","fillText","LOOSE","start","clock","PLAYING","setInterval","stop","clearInterval","withDraw","ai","fps","main","originalBoard","console","log","boardCopy","betterScore","betterPath","r","path","shapeCopy","action","window","requestAnimationFrame","clearTimeout","setFps","fpsRange","startBtn","stopBtn","Number","value"],"mappings":"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"}