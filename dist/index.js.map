{"version":3,"file":"index.js","sources":["../src/game/constants/colors.ts","../src/game/constants/shapes.ts","../src/game/core/Shape.ts","../src/game/core/Board.ts","../src/game/core/KeyHandler.ts","../src/game/core/GameHandler.ts","../src/game/index.ts","../src/ai/index.ts","../src/ai/core/AI.ts"],"sourcesContent":["const colors = [\r\n  \"#00f0f0\",\r\n  \"#0000f5\",\r\n  \"#f0a000\",\r\n  \"#f0f000\",\r\n  \"#00f000\",\r\n  \"#a000f0\",\r\n  \"#f00000\",\r\n] as const;\r\n\r\nexport default colors;\r\n","const shapes: number[][][] = [\r\n  [[1, 1, 1, 1]],\r\n  [\r\n    [2, 0, 0],\r\n    [2, 2, 2],\r\n  ],\r\n  [\r\n    [0, 0, 3],\r\n    [3, 3, 3],\r\n  ],\r\n  [\r\n    [4, 4],\r\n    [4, 4],\r\n  ],\r\n  [\r\n    [0, 5, 5],\r\n    [5, 5, 0],\r\n  ],\r\n  [\r\n    [0, 6, 0],\r\n    [6, 6, 6],\r\n  ],\r\n  [\r\n    [7, 7, 0],\r\n    [0, 7, 7],\r\n  ],\r\n];\r\n\r\nexport default shapes;\r\n","import shapes from \"../constants/shapes\";\r\nimport Board from \"./Board\";\r\n\r\nclass Shape {\r\n  /**\r\n   * we want to be able to do a last action when the shape can't go done anymore\r\n   * 0 we can do anything\r\n   * 1 we can do anything except going down\r\n   * > 1 we can't do anything\r\n   */\r\n  private downTick = 0;\r\n\r\n  constructor(\r\n    private board: Board,\r\n    private shape: number[][],\r\n    private position: { x: number; y: number } = null\r\n  ) {\r\n    if (!this.position) {\r\n      this.position = {\r\n        x: Math.floor(this.board.getWidth() / 2 - this.shape[0].length / 2),\r\n        y: -this.shape.length,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate a random shape\r\n   * @param board\r\n   * @returns\r\n   */\r\n  static randomShape(board: Board) {\r\n    const rndShape = shapes[Math.floor(Math.random() * shapes.length)];\r\n    return new Shape(board, rndShape);\r\n  }\r\n\r\n  /**\r\n   * Rotate the shape in clockwise with 90 degrees\r\n   * @returns\r\n   */\r\n  rotate() {\r\n    const matrix = this.shape;\r\n\r\n    const numRows = matrix.length;\r\n    const numCols = matrix[0].length;\r\n    const rotated: number[][] = [];\r\n\r\n    for (let col = 0; col < numCols; col++) {\r\n      const newRow: number[] = [];\r\n      for (let row = numRows - 1; row >= 0; row--) {\r\n        newRow.push(matrix[row][col]);\r\n      }\r\n      rotated.push(newRow);\r\n    }\r\n\r\n    const newY =\r\n      this.position.y +\r\n      Math.floor(this.shape.length / 2) -\r\n      Math.floor(rotated.length / 2);\r\n    const newX =\r\n      this.position.x +\r\n      Math.floor(this.shape[0].length / 2) -\r\n      Math.floor(rotated[0].length / 2);\r\n\r\n    const canRotateX =\r\n      newX + rotated[0].length <= this.board.getWidth() && newX >= 0;\r\n    const canRotateY = newY + rotated.length <= this.board.getHeight();\r\n\r\n    if (canRotateX && canRotateY) {\r\n      const board = structuredClone(this.board.getBoard());\r\n\r\n      //We simulate the removing of the original shape\r\n      for (let i = 0; i < this.shape.length; ++i) {\r\n        for (let j = 0; j < this.shape[i].length; ++j) {\r\n          if (this.position.y + i >= 0)\r\n            board[i + this.position.y][j + this.position.x] = 0;\r\n        }\r\n      }\r\n\r\n      //checking we dont make conflict with other shapes\r\n      for (let i = 0; i < rotated.length; ++i) {\r\n        for (let j = 0; j < rotated[i].length; ++j) {\r\n          if (newY + i >= 0 && board[i + newY][j + newX] !== 0) return;\r\n        }\r\n      }\r\n\r\n      this.position.y = newY;\r\n      this.position.x = newX;\r\n      this.shape = rotated;\r\n    }\r\n\r\n    this.board.update(false);\r\n  }\r\n\r\n  /**\r\n   * Check if the shape can go on the left\r\n   * @returns\r\n   */\r\n  canGoLeft() {\r\n    const shape = this.shape;\r\n    const position = this.position;\r\n    const board = this.board.getBoard();\r\n\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        const isIntersectingLeft =\r\n          position.y + i >= 0 &&\r\n          (shape[i][j - 1] === 0 || shape[i][j - 1] === undefined) &&\r\n          board[i + position.y]?.[j + position.x - 1] !== 0 &&\r\n          position.x !== 0;\r\n\r\n        if (isIntersectingLeft && shape[i][j] !== 0) return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check if the shape can go on the right\r\n   * @returns\r\n   */\r\n  canGoRiht() {\r\n    const shape = this.shape;\r\n    const position = this.position;\r\n    const board = this.board.getBoard();\r\n\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        const isIntersectingRight =\r\n          position.y + i >= 0 &&\r\n          (shape[i][j + 1] === 0 || shape[i][j + 1] === undefined) &&\r\n          board[i + position.y]?.[j + position.x + 1] !== 0 &&\r\n          position.x !== this.board.getWidth() - shape[0].length;\r\n\r\n        if (isIntersectingRight && shape[i][j] !== 0) return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check if the shape can go down\r\n   * @returns\r\n   */\r\n  canGoDown() {\r\n    if (this.haveReachedBottom()) {\r\n      ++this.downTick;\r\n      return this.downTick <= 1;\r\n    }\r\n\r\n    const shape = this.shape;\r\n    const position = this.position;\r\n    const board = this.board.getBoard();\r\n\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        const isIntersectingDown =\r\n          position.y + i + 1 >= 0 &&\r\n          (shape[i + 1]?.[j] === 0 || shape[i + 1]?.[j] === undefined) &&\r\n          board[i + position.y + 1]?.[j + position.x] !== 0;\r\n\r\n        if (isIntersectingDown && shape[i][j] !== 0) {\r\n          ++this.downTick;\r\n          return this.downTick <= 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.downTick = 0;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Make the shape go down\r\n   */\r\n  goDown() {\r\n    if (\r\n      this.position.y !== this.board.getHeight() - this.shape.length &&\r\n      this.downTick === 0\r\n    )\r\n      ++this.position.y;\r\n    this.board.update(false);\r\n  }\r\n\r\n  /**\r\n   * Make the shape go on the right\r\n   * @returns\r\n   */\r\n  goRight() {\r\n    if (!this.canGoRiht()) return;\r\n\r\n    if (this.position.x !== this.board.getWidth() - this.shape[0].length)\r\n      ++this.position.x;\r\n    this.board.update(false);\r\n  }\r\n\r\n  /**\r\n   * Make the shape go on the left\r\n   * @returns\r\n   */\r\n  goLeft() {\r\n    if (!this.canGoLeft()) return;\r\n\r\n    if (this.position.x !== 0) this.position.x--;\r\n    this.board.update(false);\r\n  }\r\n\r\n  /**\r\n   * Check if we have reached bottom of the board and cant go down anymore\r\n   * @returns\r\n   */\r\n  haveReachedBottom() {\r\n    return this.position.y === this.board.getHeight() - this.shape.length;\r\n  }\r\n\r\n  getShape() {\r\n    return this.shape;\r\n  }\r\n\r\n  getPosition() {\r\n    return this.position;\r\n  }\r\n\r\n  /**\r\n   * Create a copy of the shape\r\n   * @returns\r\n   */\r\n  copy() {\r\n    return new Shape(this.board, this.shape, structuredClone(this.position));\r\n  }\r\n}\r\n\r\nexport default Shape;\r\n","import Shape from \"./Shape\";\r\n\r\nclass Board {\r\n  private board: number[][] = [];\r\n\r\n  private score = 0;\r\n\r\n  private actualShape = Shape.randomShape(this);\r\n  private nextShape = Shape.randomShape(this);\r\n  private backShape: Shape;\r\n\r\n  constructor(private width = 12, private height = 24) {\r\n    this.buildBoard();\r\n  }\r\n\r\n  /**\r\n   * Build the board\r\n   */\r\n  private buildBoard() {\r\n    for (let i = 0; i < this.width * this.height; ++i) {\r\n      if (i % this.width === 0) this.board.push([]);\r\n      this.board[this.board.length - 1].push(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the last position of the actual shape from the board\r\n   * @returns\r\n   */\r\n  removeLastShapeDraw() {\r\n    if (!this.backShape) return;\r\n\r\n    const shape = this.backShape.getShape();\r\n    const position = this.backShape.getPosition();\r\n\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        if (position.y + i < 0) continue;\r\n        if (shape[i][j] !== 0) this.board[i + position.y][j + position.x] = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the actual shape to the board\r\n   */\r\n  displayShape() {\r\n    const shape = this.actualShape.getShape();\r\n    const position = this.actualShape.getPosition();\r\n\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        if (position.y + i < 0) continue;\r\n        if (shape[i][j] !== 0)\r\n          this.board[i + position.y][j + position.x] = shape[i][j];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the game is loose\r\n   * @returns\r\n   */\r\n  haveLoose() {\r\n    const topLine = this.board[0];\r\n    return topLine.some((col) => col !== 0) && !this.actualShape.canGoDown();\r\n  }\r\n\r\n  /**\r\n   * Get the score from the completed lines as the same moment\r\n   * @param completedLines\r\n   * @returns\r\n   */\r\n  getScoreFromCompletedLine(completedLines: number) {\r\n    switch (completedLines) {\r\n      case 0:\r\n        return 0;\r\n      case 1:\r\n        return 40;\r\n      case 2:\r\n        return 100;\r\n      case 3:\r\n        return 300;\r\n      default:\r\n        return 1200;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove completed lines and set the score based on it\r\n   */\r\n  removeCompletedLines() {\r\n    let completedLines = 0;\r\n\r\n    for (let i = 0; i < this.board.length; ++i) {\r\n      const line = this.board[i];\r\n\r\n      const lineCompleted = line.every((col) => col !== 0);\r\n\r\n      if (!lineCompleted) continue;\r\n\r\n      ++completedLines;\r\n      this.board.splice(i, 1);\r\n      this.board.unshift(Array(this.width).fill(0));\r\n    }\r\n\r\n    this.score += this.getScoreFromCompletedLine(completedLines);\r\n  }\r\n\r\n  /**\r\n   * Update the board (make shape go down, ...)\r\n   * @param goDown\r\n   */\r\n  update(goDown = true) {\r\n    this.removeLastShapeDraw();\r\n\r\n    if (!this.actualShape.canGoDown()) {\r\n      this.score += this.actualShape.getShape().length + 1; //We had the numbers of rows + 1 to the score\r\n      this.displayShape();\r\n      this.removeCompletedLines();\r\n      this.actualShape = this.nextShape;\r\n      this.nextShape = Shape.randomShape(this);\r\n    }\r\n\r\n    this.backShape = this.actualShape.copy();\r\n\r\n    if (goDown) this.actualShape.goDown();\r\n\r\n    this.displayShape();\r\n  }\r\n\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  getBoard() {\r\n    return this.board;\r\n  }\r\n\r\n  getWidth() {\r\n    return this.width;\r\n  }\r\n\r\n  getHeight() {\r\n    return this.height;\r\n  }\r\n\r\n  getActualShape() {\r\n    return this.actualShape;\r\n  }\r\n\r\n  getNextShape() {\r\n    return this.nextShape;\r\n  }\r\n\r\n  /**\r\n   * Reset the board\r\n   */\r\n  reset() {\r\n    this.board = [];\r\n\r\n    this.actualShape = Shape.randomShape(this);\r\n    this.nextShape = Shape.randomShape(this);\r\n    this.backShape = null;\r\n\r\n    this.score = 0;\r\n\r\n    this.buildBoard();\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import GameHandler from \"./GameHandler\";\r\n\r\ntype Keys = {\r\n  RIGHT: string;\r\n  DOWN: string;\r\n  LEFT: string;\r\n  ROTATE: string;\r\n};\r\n\r\nclass KeyHandler {\r\n  constructor(private gameHandler: GameHandler, private keys: Keys) {\r\n    this.initListener();\r\n  }\r\n\r\n  /**\r\n   * Append key listener to the dom\r\n   */\r\n  initListener() {\r\n    const board = this.gameHandler.getBoard();\r\n\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      if (!this.gameHandler.isRunning()) return;\r\n\r\n      const key = event.key;\r\n      const cmd = Object.entries(this.keys).find(\r\n        (arr) => arr[1].toLocaleLowerCase() === key.toLocaleLowerCase()\r\n      );\r\n\r\n      if (cmd) {\r\n        const shape = board.getActualShape();\r\n\r\n        switch (cmd[0]) {\r\n          case \"RIGHT\":\r\n            shape.goRight();\r\n            break;\r\n          case \"LEFT\":\r\n            shape.goLeft();\r\n            break;\r\n          case \"DOWN\":\r\n            shape.goDown();\r\n            break;\r\n          case \"ROTATE\":\r\n            shape.rotate();\r\n            break;\r\n        }\r\n\r\n        this.gameHandler.drawGame();\r\n        if (board.haveLoose()) this.gameHandler.loose();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default KeyHandler;\r\n","import colors from \"../constants/colors\";\r\nimport Board from \"./Board\";\r\nimport KeyHandler from \"./KeyHandler\";\r\n\r\nenum GameStatus {\r\n  LOOSE = \"You loose\",\r\n  NOT_PLAYING = \"Not playing\",\r\n  PLAYING = \"Playing\",\r\n}\r\n\r\nconst GAME_OPTIONS = {\r\n  TICK: 400,\r\n  KEYS: {\r\n    RIGHT: \"ArrowRight\",\r\n    DOWN: \"ArrowDown\",\r\n    LEFT: \"ArrowLeft\",\r\n    ROTATE: \"ArrowUp\",\r\n  },\r\n};\r\n\r\nclass GameHandler {\r\n  private clock: NodeJS.Timer;\r\n\r\n  private ctx: CanvasRenderingContext2D;\r\n  private canvasWidth: number;\r\n  private canvasHeight: number;\r\n\r\n  private board = new Board();\r\n  private keyHandler: KeyHandler;\r\n\r\n  private gameStatus: GameStatus = GameStatus.NOT_PLAYING;\r\n\r\n  constructor(private canvas: HTMLCanvasElement) {\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.canvasWidth = canvas.width;\r\n    this.canvasHeight = canvas.height;\r\n\r\n    this.keyHandler = new KeyHandler(this, GAME_OPTIONS.KEYS);\r\n\r\n    this.drawGame();\r\n  }\r\n\r\n  /**\r\n   * Draw polygon on the block\r\n   * @param coordinates\r\n   * @param color\r\n   */\r\n  drawPolygon(coordinates: { x: number; y: number }[], color: string) {\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(coordinates[0].x, coordinates[0].y);\r\n    for (let i = 1; i < coordinates.length; ++i) {\r\n      this.ctx.lineTo(coordinates[i].x, coordinates[i].y);\r\n    }\r\n    this.ctx.closePath();\r\n    this.ctx.fill();\r\n  }\r\n\r\n  /**\r\n   * Draw one block for a tetris shape\r\n   * @param x\r\n   * @param y\r\n   * @param color\r\n   * @param suppX\r\n   * @param suppY\r\n   */\r\n  drawRect(x: number, y: number, color: string, suppX = 0, suppY = 0) {\r\n    const blockSizeWidth = this.canvasWidth / 2 / this.board.getWidth();\r\n    const blockSizeHeight = this.canvasHeight / this.board.getHeight();\r\n\r\n    const fx = x * blockSizeWidth + suppX;\r\n    const fy = y * blockSizeHeight + suppY;\r\n\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.fillRect(fx, fy, blockSizeWidth, blockSizeHeight);\r\n\r\n    /* Fill polygons for best effect */\r\n    const coordinatesSupp = [\r\n      { x: fx, y: fy },\r\n      { x: fx + blockSizeWidth, y: fy },\r\n      { x: fx + blockSizeWidth - 2, y: fy + blockSizeHeight / 4 },\r\n      { x: fx + 2, y: fy + blockSizeHeight / 4 },\r\n    ];\r\n    const coordinatesInf = [\r\n      { x: fx, y: fy + blockSizeHeight },\r\n      { x: fx + blockSizeWidth, y: fy + blockSizeHeight },\r\n      {\r\n        x: fx + blockSizeWidth - 2,\r\n        y: fy + blockSizeHeight - blockSizeHeight / 4,\r\n      },\r\n      { x: fx + 2, y: fy + blockSizeHeight - blockSizeHeight / 4 },\r\n    ];\r\n    const coordinatesLeft = [\r\n      { x: fx, y: fy },\r\n      { x: fx + blockSizeWidth / 4, y: fy + 2 },\r\n      {\r\n        x: fx + blockSizeWidth / 4,\r\n        y: fy + blockSizeHeight - 2,\r\n      },\r\n      { x: fx, y: fy + blockSizeHeight },\r\n    ];\r\n    const coordinatesRight = [\r\n      { x: fx + blockSizeWidth, y: fy },\r\n      { x: fx + blockSizeWidth - blockSizeWidth / 4, y: fy + 2 },\r\n      {\r\n        x: fx + blockSizeWidth - blockSizeWidth / 4,\r\n        y: fy + blockSizeHeight - 2,\r\n      },\r\n      { x: fx + blockSizeWidth, y: fy + blockSizeHeight },\r\n    ];\r\n    this.drawPolygon(coordinatesSupp, \"#ffffff80\");\r\n    this.drawPolygon(coordinatesInf, \"#00000080\");\r\n    this.drawPolygon(coordinatesLeft, \"#00000050\");\r\n    this.drawPolygon(coordinatesRight, \"#00000050\");\r\n  }\r\n\r\n  /**\r\n   * Draw all the game and informations\r\n   */\r\n  drawGame() {\r\n    const darkColor = \"#212129\";\r\n\r\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n\r\n    this.ctx.fillStyle = darkColor;\r\n    this.ctx.fillRect(0, 0, this.canvasWidth / 2, this.canvasHeight);\r\n\r\n    const boardMatrix = this.board.getBoard();\r\n\r\n    /* Drawing main board */\r\n    for (let i = 0; i < boardMatrix.length; ++i) {\r\n      for (let j = 0; j < boardMatrix[i].length; ++j) {\r\n        const dontNeedDraw = boardMatrix[i][j] === 0;\r\n\r\n        if (dontNeedDraw) continue;\r\n\r\n        //We set -1 because 0 was reserved for empty\r\n        const color = colors[boardMatrix[i][j] - 1];\r\n        this.drawRect(j, i, color);\r\n      }\r\n    }\r\n\r\n    const textX = this.canvasWidth / 2 + 10;\r\n\r\n    /* Score */\r\n    this.ctx.fillStyle = darkColor;\r\n    this.ctx.font = \"18px Arial, sans-serif\";\r\n    this.ctx.fillText(\"Score: \" + this.board.getScore(), textX, 30);\r\n\r\n    /* Game status */\r\n    this.ctx.fillText(\"Game status:\", textX, 60);\r\n    this.ctx.fillText(\"- \" + this.gameStatus, textX, 80);\r\n\r\n    /* Next Shape */\r\n    this.ctx.fillText(\"Next Shape:\", textX, 110);\r\n    const nextShape = this.board.getNextShape().getShape();\r\n    for (let i = 0; i < nextShape.length; ++i) {\r\n      for (let j = 0; j < nextShape[i].length; ++j) {\r\n        const dontNeedDraw = nextShape[i][j] === 0;\r\n\r\n        if (dontNeedDraw) continue;\r\n\r\n        //We set -1 because 0 was reserved for empty\r\n        const color = colors[nextShape[i][j] - 1];\r\n        this.drawRect(j, i, color, textX, 120);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to call when we loose\r\n   */\r\n  loose() {\r\n    this.gameStatus = GameStatus.LOOSE;\r\n    this.drawGame();\r\n    this.reset(false);\r\n  }\r\n\r\n  /**\r\n   * Start the game/clock\r\n   */\r\n  start() {\r\n    if (!this.clock) {\r\n      this.gameStatus = GameStatus.PLAYING;\r\n      this.clock = setInterval(() => {\r\n        this.board.update();\r\n        this.drawGame();\r\n        if (this.board.haveLoose()) this.loose();\r\n      }, GAME_OPTIONS.TICK);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the game/clock\r\n   */\r\n  stop() {\r\n    clearInterval(this.clock);\r\n    this.gameStatus = GameStatus.NOT_PLAYING;\r\n    this.clock = null;\r\n  }\r\n\r\n  /**\r\n   * Reset the game\r\n   * @param withDraw\r\n   */\r\n  reset(withDraw = true) {\r\n    this.stop();\r\n    this.board.reset();\r\n    if (withDraw) this.drawGame();\r\n  }\r\n\r\n  /**\r\n   * Check if game is playing\r\n   * @returns\r\n   */\r\n  isRunning() {\r\n    return !!this.clock;\r\n  }\r\n\r\n  getBoard() {\r\n    return this.board;\r\n  }\r\n}\r\n\r\nexport default GameHandler;\r\n","import GameHandler from \"./core/GameHandler\";\r\n\r\nconst canvas = document.querySelector(\"canvas\");\r\nconst playBtn = document.querySelector(\"#play\");\r\nconst pauseBtn = document.querySelector(\"#pause\");\r\nconst resetBtn = document.querySelector(\"#reset\");\r\n\r\nconst game = new GameHandler(canvas);\r\n\r\nplayBtn.addEventListener(\"click\", () => game.start());\r\npauseBtn.addEventListener(\"click\", () => game.stop());\r\nresetBtn.addEventListener(\"click\", () => game.reset());\r\n\r\nexport default game;\r\n","import game from \"../game\";\r\nimport AI from \"./core/AI\";\r\n\r\nconst ai = new AI(game);\r\n\r\nconst fpsRange: HTMLInputElement = document.querySelector(\"#fps\");\r\nconst startBtn = document.querySelector(\"#start-ai\");\r\nconst stopBtn = document.querySelector(\"#stop-ai\");\r\n\r\nfpsRange.addEventListener(\"change\", () => ai.setFps(Number(fpsRange.value)));\r\nstartBtn.addEventListener(\"click\", () => ai.start());\r\nstopBtn.addEventListener(\"click\", () => ai.stop());\r\n\r\nexport default ai;\r\n","import GameHandler from \"../../game/core/GameHandler\";\r\n\r\nclass AI {\r\n  private fps = 10;\r\n  private clock: NodeJS.Timeout;\r\n\r\n  constructor(private gameHandler: GameHandler) {}\r\n\r\n  main() {\r\n    const boardClass = this.gameHandler.getBoard();\r\n    const shapeClass = boardClass.getActualShape();\r\n\r\n    shapeClass.goDown();\r\n\r\n    this.gameHandler.drawGame();\r\n    this.clock = setTimeout(() => this.main(), 1000 / this.fps);\r\n  }\r\n\r\n  start() {\r\n    //we stop the gameHandler to ensure we can't use key and the game dont refresh each GAME TICK\r\n    this.gameHandler.stop();\r\n    this.main();\r\n  }\r\n\r\n  stop() {\r\n    if (this.clock) clearTimeout(this.clock);\r\n  }\r\n\r\n  setFps(fps: number) {\r\n    this.fps = fps;\r\n  }\r\n}\r\n\r\nexport default AI;\r\n"],"names":["colors","shapes","Shape","constructor","board","shape","position","this","downTick","x","Math","floor","getWidth","length","y","randomShape","rndShape","random","rotate","matrix","numRows","numCols","rotated","col","newRow","row","push","newY","newX","canRotateX","canRotateY","getHeight","structuredClone","getBoard","i","j","update","canGoLeft","undefined","canGoRiht","canGoDown","haveReachedBottom","_a","_b","_c","goDown","goRight","goLeft","getShape","getPosition","copy","Board","width","height","score","actualShape","nextShape","buildBoard","removeLastShapeDraw","backShape","displayShape","haveLoose","some","getScoreFromCompletedLine","completedLines","removeCompletedLines","every","splice","unshift","Array","fill","getScore","getActualShape","getNextShape","reset","KeyHandler","gameHandler","keys","initListener","document","addEventListener","event","isRunning","key","cmd","Object","entries","find","arr","toLocaleLowerCase","drawGame","loose","GameStatus","GAME_OPTIONS","RIGHT","DOWN","LEFT","ROTATE","canvas","querySelector","playBtn","pauseBtn","resetBtn","game","gameStatus","NOT_PLAYING","ctx","getContext","canvasWidth","canvasHeight","keyHandler","drawPolygon","coordinates","color","fillStyle","beginPath","moveTo","lineTo","closePath","drawRect","suppX","suppY","blockSizeWidth","blockSizeHeight","fx","fy","fillRect","coordinatesSupp","coordinatesInf","coordinatesLeft","coordinatesRight","darkColor","clearRect","boardMatrix","textX","font","fillText","LOOSE","start","clock","PLAYING","setInterval","stop","clearInterval","withDraw","ai","fps","main","setTimeout","clearTimeout","setFps","fpsRange","startBtn","stopBtn","Number","value"],"mappings":"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"}